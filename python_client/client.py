"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è AllTalk TTS API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –∞—É–¥–∏–æ
–§–æ–∫—É—Å –Ω–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ –∏ —á–∞–Ω–∫–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
"""

import asyncio
import re
import time
import json
import os
from typing import Iterator, Optional, AsyncIterator, List, Dict, Any
import aiohttp
import requests
from urllib.parse import urlencode, quote
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TTSConfig:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TTS –∫–ª–∏–µ–Ω—Ç–∞"""
    
    def __init__(self, config_file: str = "tts_config.json"):
        self.config_file = config_file
        self.default_config = {
            "api_alltalk_protocol": "http://",
            "api_alltalk_ip_port": "80.251.139.116:7851",
            "api_connection_timeout": 10,
            "default_voice": "Arnold.wav",
            "default_language": "ru",
            "default_chunk_size": 100,
        }
        self.config = self.load_config()
    
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                for key, value in self.default_config.items():
                    config.setdefault(key, value)
                return config
            else:
                logger.info(f"–°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file}")
                self.save_config(self.default_config)
                return self.default_config.copy()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return self.default_config.copy()
    
    def save_config(self, config: Dict[str, Any] = None) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            config_to_save = config or self.config
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config_to_save, f, indent=4, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    @property
    def base_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API"""
        return f"{self.config['api_alltalk_protocol']}{self.config['api_alltalk_ip_port']}"


class TTSStreamingClient:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ TTS API AllTalk"""
    
    def __init__(self, config_file: str = "tts_config.json"):
        self.config = TTSConfig(config_file)
        self.session: Optional[aiohttp.ClientSession] = None
        
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        timeout = aiohttp.ClientTimeout(total=self.config.config['api_connection_timeout'])
        self.session = aiohttp.ClientSession(timeout=timeout)
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()
    
    def chunk_text(self, text: str, max_chunk_size: int = None) -> List[str]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            max_chunk_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞
        """
        if max_chunk_size is None:
            max_chunk_size = self.config.config['default_chunk_size']
            
        if not text.strip():
            return []
            
        # –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        sentence_endings = r'[.!?]+\s+'
        clause_endings = r'[;,]\s+'
        
        chunks = []
        current_chunk = ""
        
        # –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
        sentences = re.split(sentence_endings, text)
        
        for i, sentence in enumerate(sentences):
            sentence = sentence.strip()
            if not sentence:
                continue
                
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º/—Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π
            if len(sentence) > max_chunk_size:
                clauses = re.split(clause_endings, sentence)
                for j, clause in enumerate(clauses):
                    clause = clause.strip()
                    if not clause:
                        continue
                        
                    # –ï—Å–ª–∏ –∫–ª–∞—É–∑–∞ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                    if len(clause) > max_chunk_size:
                        words = clause.split()
                        temp_chunk = ""
                        for word in words:
                            if len(temp_chunk + " " + word) > max_chunk_size and temp_chunk:
                                chunks.append(temp_chunk.strip())
                                temp_chunk = word
                            else:
                                temp_chunk = temp_chunk + " " + word if temp_chunk else word
                        if temp_chunk:
                            chunks.append(temp_chunk.strip())
                    else:
                        chunks.append(clause)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
                if len(current_chunk + " " + sentence) > max_chunk_size and current_chunk:
                    chunks.append(current_chunk.strip())
                    current_chunk = sentence
                else:
                    current_chunk = current_chunk + " " + sentence if current_chunk else sentence
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
        if current_chunk.strip():
            chunks.append(current_chunk.strip())
            
        return chunks
    
    async def stream_tts_chunk(
        self, 
        text: str, 
        voice: str = None, 
        language: str = None,
        output_file: str = None
    ) -> bytes:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç TTS –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GET –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            voice: –ì–æ–ª–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            language: –Ø–∑—ã–∫
            output_file: –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            
        Returns:
            –ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –≤ –±–∞–π—Ç–∞—Ö
        """
        if not text.strip():
            return b""
        
        if not self.session:
            raise RuntimeError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ async with.")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        voice = voice or self.config.config['default_voice']
        language = language or self.config.config['default_language']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if not output_file:
            timestamp = int(time.time() * 1000)
            output_file = f"tts_chunk_{timestamp}.wav"
        
        # –°–æ–∑–¥–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        params = {
            "text": text.strip(),
            "voice": voice,
            "language": language,
            "output_file": output_file
        }
        
        # –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è URL
        encoded_params = urlencode(params, quote_via=quote)
        streaming_url = f"{self.config.base_url}/api/tts-generate-streaming?{encoded_params}"
        
        logger.info(f"üåä –ó–∞–ø—Ä–æ—Å TTS: '{text[:50]}...' —á–µ—Ä–µ–∑ GET")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º GET –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ JavaScript –ø—Ä–∏–º–µ—Ä–µ
            async with self.session.get(streaming_url) as response:
                if response.status == 200:
                    audio_data = await response.read()
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(audio_data)} –±–∞–π—Ç –∞—É–¥–∏–æ")
                    return audio_data
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ TTS API: {response.status}")
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error_text}")
                    return b""
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS: {e}")
            return b""
    
    async def generate_tts_from_text(
        self,
        text: str,
        voice: str = None,
        language: str = None,
        max_chunk_size: int = None
    ) -> AsyncIterator[bytes]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç TTS –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Ä–∞–∑–±–∏—Ç–æ–≥–æ –Ω–∞ —á–∞–Ω–∫–∏
        """
        voice = voice or self.config.config['default_voice']
        language = language or self.config.config['default_language']
        max_chunk_size = max_chunk_size or self.config.config['default_chunk_size']
        
        chunks = self.chunk_text(text, max_chunk_size)
        logger.info(f"üìù –†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤")
        
        for i, chunk in enumerate(chunks, 1):
            if chunk.strip():
                logger.info(f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ {i}/{len(chunks)}: '{chunk[:30]}...'")
                audio_data = await self.stream_tts_chunk(chunk, voice, language)
                if audio_data:
                    yield audio_data
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
                    await asyncio.sleep(0.1)
    
    async def stream_tts_from_iterator(
        self,
        text_iterator: AsyncIterator[str],
        voice: str = None,
        language: str = None,
        max_chunk_size: int = None,
        chunk_timeout: float = 2.0
    ) -> AsyncIterator[bytes]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç TTS –∏–∑ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç Ollama)
        """
        voice = voice or self.config.config['default_voice']
        language = language or self.config.config['default_language']
        max_chunk_size = max_chunk_size or self.config.config['default_chunk_size']
        
        buffer = ""
        last_update_time = time.time()
        
        async for text_part in text_iterator:
            buffer += text_part
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–Ω–∫
            should_send = False
            
            # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            if re.search(r'[.!?]+\s+', buffer):
                should_send = True
            # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            elif len(buffer) > max_chunk_size:
                should_send = True
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            elif current_time - last_update_time > chunk_timeout and buffer.strip():
                should_send = True
            
            if should_send:
                chunks = self.chunk_text(buffer, max_chunk_size)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º)
                for chunk in chunks[:-1]:
                    if chunk.strip():
                        audio_data = await self.stream_tts_chunk(chunk, voice, language)
                        if audio_data:
                            yield audio_data
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –≤ –±—É—Ñ–µ—Ä–µ
                buffer = chunks[-1] if chunks else ""
                last_update_time = current_time
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä–µ
        if buffer.strip():
            final_chunks = self.chunk_text(buffer, max_chunk_size)
            for chunk in final_chunks:
                if chunk.strip():
                    audio_data = await self.stream_tts_chunk(chunk, voice, language)
                    if audio_data:
                        yield audio_data


# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
class SyncTTSClient:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è TTSStreamingClient"""
    
    def __init__(self, config_file: str = "tts_config.json"):
        self.config = TTSConfig(config_file)
    
    def chunk_text(self, text: str, max_chunk_size: int = None) -> List[str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏"""
        max_chunk_size = max_chunk_size or self.config.config['default_chunk_size']
        client = TTSStreamingClient(self.config.config_file)
        return client.chunk_text(text, max_chunk_size)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def simple_test():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    async with TTSStreamingClient() as client:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞–Ω–∫–æ–≤–∞–Ω–∏–µ
        test_text = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã TTS."
        chunks = client.chunk_text(test_text, max_chunk_size=30)
        logger.info(f"üìù –†–∞–∑–±–∏—Ç–æ –Ω–∞ —á–∞–Ω–∫–∏: {chunks}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º TTS
        if chunks:
            audio_data = await client.stream_tts_chunk(chunks[0])
            if audio_data:
                logger.info(f"üéµ –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: {len(audio_data)} –±–∞–π—Ç")
                return True
        
        return False


if __name__ == "__main__":
    asyncio.run(simple_test())
