#!/usr/bin/env python3
"""
üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AllTalk TTS –∫–ª–∏–µ–Ω—Ç–∞
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ API —á–µ—Ä–µ–∑ GET –∑–∞–ø—Ä–æ—Å
"""

import asyncio
import logging
import time
from client import TTSStreamingClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


async def test_get_streaming():
    """–¢–µ—Å—Ç GET –∑–∞–ø—Ä–æ—Å–∞ –∫ streaming API –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ API...")
    
    async with TTSStreamingClient() as client:
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ç–µ–∫—Å—Ç–∞
        test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ TTS API –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        
        logger.info(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{test_text}'")
        logger.info(f"üé§ –ì–æ–ª–æ—Å: {client.config.config['default_voice']}")
        logger.info(f"üåê –°–µ—Ä–≤–µ—Ä: {client.config.base_url}")
        
        start_time = time.time()
        audio_data = await client.stream_tts_chunk(
            text=test_text,
            voice="Arnold.wav",
            language="ru"
        )
        latency = time.time() - start_time
        
        if audio_data:
            logger.info(f"‚úÖ –£—Å–ø–µ—Ö: {len(audio_data)} –±–∞–π—Ç –∑–∞ {latency:.2f}—Å")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            with open("test_output.wav", "wb") as f:
                f.write(audio_data)
            logger.info("üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ test_output.wav")
            
            return True
        else:
            logger.error("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False


async def test_chunking():
    """–¢–µ—Å—Ç —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    logger.info("‚úÇÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è...")
    
    async with TTSStreamingClient() as client:
        long_text = """
        –≠—Ç–æ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è. 
        –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏. 
        –ê –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏? –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–±–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞–∑—É–º–Ω–æ.
        """
        
        chunks = client.chunk_text(long_text.strip(), max_chunk_size=50)
        
        logger.info(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(long_text.strip())} —Å–∏–º–≤–æ–ª–æ–≤):")
        logger.info(f"   '{long_text.strip()}'")
        logger.info(f"‚úÇÔ∏è –†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤:")
        
        for i, chunk in enumerate(chunks, 1):
            logger.info(f"   {i}. [{len(chunk):2d}] '{chunk}'")
        
        return len(chunks) > 1


async def test_streaming_generation():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ"""
    logger.info("üåä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    
    text = """
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ TTS! 
    –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Ä–µ—á—å –ø–æ —á–∞—Å—Ç—è–º. 
    –ö–∞–∂–¥—ã–π —á–∞–Ω–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """
    
    async with TTSStreamingClient() as client:
        chunks_count = 0
        total_size = 0
        start_time = time.time()
        first_chunk_time = None
        
        async for audio_chunk in client.generate_tts_from_text(
            text.strip(), 
            max_chunk_size=60
        ):
            if audio_chunk:
                chunks_count += 1
                total_size += len(audio_chunk)
                
                if first_chunk_time is None:
                    first_chunk_time = time.time() - start_time
                    logger.info(f"üéØ –ü–µ—Ä–≤—ã–π —á–∞–Ω–∫ –∑–∞: {first_chunk_time:.2f}—Å")
                
                logger.info(f"üì¶ –ß–∞–Ω–∫ {chunks_count}: {len(audio_chunk)} –±–∞–π—Ç")
        
        total_time = time.time() - start_time
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        logger.info(f"   üì¶ –ß–∞–Ω–∫–æ–≤: {chunks_count}")
        logger.info(f"   üéµ –†–∞–∑–º–µ—Ä: {total_size} –±–∞–π—Ç")
        logger.info(f"   ‚è∞ –í—Ä–µ–º—è: {total_time:.2f}—Å")
        
        if chunks_count > 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –∞—É–¥–∏–æ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
            all_audio = b""
            async for audio_chunk in client.generate_tts_from_text(text.strip(), max_chunk_size=60):
                if audio_chunk:
                    all_audio += audio_chunk
            
            if all_audio:
                with open("streaming_output.wav", "wb") as f:
                    f.write(all_audio)
                logger.info("üíæ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ streaming_output.wav")
        
        return chunks_count > 0


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç AllTalk TTS –∫–ª–∏–µ–Ω—Ç–∞")
    logger.info("=" * 50)
    
    tests = [
        ("GET Streaming API", test_get_streaming),
        ("–ê–ª–≥–æ—Ä–∏—Ç–º —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è", test_chunking),
        ("–ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", test_streaming_generation),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            logger.info(f"\nüß™ {test_name}")
            logger.info("-" * 30)
            
            success = await test_func()
            if success:
                passed += 1
                logger.info(f"‚úÖ {test_name} - –£–°–ü–ï–•")
            else:
                failed += 1
                logger.error(f"‚ùå {test_name} - –ü–†–û–í–ê–õ")
                
        except Exception as e:
            failed += 1
            logger.error(f"üí• {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    logger.info(f"\n" + "=" * 50)
    logger.info(f"üìä –ò–¢–û–ì–ò: {passed} —É—Å–ø–µ—Ö, {failed} –ø—Ä–æ–≤–∞–ª")
    
    if failed == 0:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üí° –ü–æ—Ç–æ–∫–æ–≤—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ GET –∑–∞–ø—Ä–æ—Å—ã")
    else:
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É AllTalk")


if __name__ == "__main__":
    asyncio.run(main()) 