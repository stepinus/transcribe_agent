"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–ª—è TTS –∫–ª–∏–µ–Ω—Ç–∞ AllTalk
–§–æ–∫—É—Å –Ω–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ –∏ —á–∞–Ω–∫–æ–≤–∞–Ω–∏–∏
"""

import asyncio
import time
import random
from typing import AsyncIterator
from client import TTSStreamingClient, SyncTTSClient, TTSConfig
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class OllamaTextSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –ø–æ—Ç–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç Ollama –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, full_text: str, chunk_delay: float = 0.1):
        self.full_text = full_text
        self.chunk_delay = chunk_delay
        
    async def stream_text(self) -> AsyncIterator[str]:
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        words = self.full_text.split()
        current_chunk = ""
        
        for i, word in enumerate(words):
            current_chunk += word + " "
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –∫–∞–∂–¥—ã–µ 2-4 —Å–ª–æ–≤–∞ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            should_send = (
                (i + 1) % random.randint(2, 4) == 0 or 
                word.endswith(('.', '!', '?')) or 
                i == len(words) - 1
            )
            
            if should_send:
                yield current_chunk
                current_chunk = ""
                await asyncio.sleep(self.chunk_delay)


async def test_chunking():
    """–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è"""
    logger.info("‚úÇÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è...")
    
    client = TTSStreamingClient()
    
    test_cases = [
        {
            "text": "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.",
            "max_size": 100,
            "description": "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç"
        },
        {
            "text": "–ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –¢—Ä–µ—Ç—å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?",
            "max_size": 25,
            "description": "–¢—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        },
        {
            "text": "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ —Å–ª–æ–≤ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ —á–∞—Å—Ç–∏.",
            "max_size": 30,
            "description": "–î–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        chunks = client.chunk_text(case["text"], case["max_size"])
        logger.info(f"–¢–µ—Å—Ç {i} - {case['description']}: {len(chunks)} —á–∞–Ω–∫–æ–≤")
        for j, chunk in enumerate(chunks):
            logger.info(f"  –ß–∞–Ω–∫ {j+1}: '{chunk}' (–¥–ª–∏–Ω–∞: {len(chunk)})")
    
    logger.info("‚úÖ –¢–µ—Å—Ç —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
    return True


async def test_streaming_tts():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ TTS"""
    logger.info("üåä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ TTS...")
    
    async with TTSStreamingClient() as client:
        # –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —á–∞–Ω–∫–∞
        test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ TTS API."
        
        logger.info(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π —á–∞–Ω–∫: '{test_text}'")
        start_time = time.time()
        
        audio_data = await client.stream_tts_chunk(test_text)
        latency = time.time() - start_time
        
        if audio_data:
            logger.info(f"‚úÖ –£—Å–ø–µ—Ö: {len(audio_data)} –±–∞–π—Ç –∑–∞ {latency:.2f}—Å")
            logger.info(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {len(test_text)/latency:.1f} —Å–∏–º–≤–æ–ª–æ–≤/—Å–µ–∫")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ")
            return False


async def test_text_to_speech():
    """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å —Å —á–∞–Ω–∫–æ–≤–∞–Ω–∏–µ–º"""
    logger.info("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å...")
    
    text = """
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å! 
    –≠—Ç–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º. 
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—á–∏.
    """.strip()
    
    async with TTSStreamingClient() as client:
        logger.info(f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        chunks_received = 0
        total_size = 0
        start_time = time.time()
        first_chunk_time = None
        
        async for audio_chunk in client.generate_tts_from_text(text, max_chunk_size=80):
            if audio_chunk:
                chunks_received += 1
                total_size += len(audio_chunk)
                
                if first_chunk_time is None:
                    first_chunk_time = time.time() - start_time
                    logger.info(f"üéØ –ü–µ—Ä–≤—ã–π —á–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω –∑–∞: {first_chunk_time:.2f}—Å")
                
                logger.info(f"üì¶ –ß–∞–Ω–∫ {chunks_received}: {len(audio_chunk)} –±–∞–π—Ç")
        
        total_time = time.time() - start_time
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        logger.info(f"   üì¶ –ß–∞–Ω–∫–æ–≤: {chunks_received}")
        logger.info(f"   üéµ –†–∞–∑–º–µ—Ä: {total_size} –±–∞–π—Ç")
        logger.info(f"   ‚è∞ –í—Ä–µ–º—è: {total_time:.2f}—Å")
        if first_chunk_time:
            logger.info(f"   üöÄ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞: {first_chunk_time:.2f}—Å")
        
        return chunks_received > 0


async def test_streaming_simulation():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π Ollama"""
    logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ—Ç–æ–∫–∞ –æ—Ç Ollama...")
    
    demo_text = """
    –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è. 
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–≥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. 
    –°–∏—Å—Ç–µ–º—ã TTS –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—É—é —Ä–µ—á—å.
    """
    
    simulator = OllamaTextSimulator(demo_text.strip(), chunk_delay=0.2)
    
    async with TTSStreamingClient() as client:
        logger.info("üîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞ –æ—Ç Ollama...")
        
        audio_chunks = []
        start_time = time.time()
        first_audio_time = None
        
        async for audio_data in client.stream_tts_from_iterator(
            simulator.stream_text(),
            max_chunk_size=60
        ):
            if audio_data:
                audio_chunks.append(audio_data)
                
                if first_audio_time is None:
                    first_audio_time = time.time() - start_time
                    logger.info(f"üéØ –ü–µ—Ä–≤–æ–µ –∞—É–¥–∏–æ –∑–∞: {first_audio_time:.2f}—Å")
                
                logger.info(f"üéµ –ê—É–¥–∏–æ —á–∞–Ω–∫: {len(audio_data)} –±–∞–π—Ç")
        
        total_time = time.time() - start_time
        total_size = sum(len(chunk) for chunk in audio_chunks)
        
        logger.info(f"üìä –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"   üì¶ –ê—É–¥–∏–æ —á–∞–Ω–∫–æ–≤: {len(audio_chunks)}")
        logger.info(f"   üéµ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size} –±–∞–π—Ç")
        logger.info(f"   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
        
        return len(audio_chunks) > 0


async def test_sync_client():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
    
    sync_client = SyncTTSClient()
    
    # –¢–µ—Å—Ç —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è
    test_text = "–≠—Ç–æ —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞. –û–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç."
    chunks = sync_client.chunk_text(test_text, max_chunk_size=25)
    
    logger.info(f"‚úÇÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á–∞–Ω–∫–æ–≤–∞–Ω–∏–µ: {len(chunks)} —á–∞–Ω–∫–æ–≤")
    for i, chunk in enumerate(chunks, 1):
        logger.info(f"  –ß–∞–Ω–∫ {i}: '{chunk}'")
    
    logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
    return True


async def test_latency_measurement():
    """–¢–µ—Å—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏"""
    logger.info("‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏...")
    
    async with TTSStreamingClient() as client:
        test_cases = [
            "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç.",
            "–¢–µ—Å—Ç —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.",
            "–ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∫ –≤–ª–∏—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ."
        ]
        
        for i, text in enumerate(test_cases, 1):
            logger.info(f"üìù –¢–µ—Å—Ç {i}: '{text[:30]}...' ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            start_time = time.time()
            audio_data = await client.stream_tts_chunk(text)
            latency = time.time() - start_time
            
            if audio_data:
                speed = len(text) / latency
                logger.info(f"   ‚úÖ {len(audio_data)} –±–∞–π—Ç –∑–∞ {latency:.2f}—Å ({speed:.1f} —Å–∏–º–≤/—Å)")
            else:
                logger.info(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        logger.info("‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ TTS –∫–ª–∏–µ–Ω—Ç–∞...")
    
    tests = [
        ("–ê–ª–≥–æ—Ä–∏—Ç–º —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è", test_chunking),
        ("–ü–æ—Ç–æ–∫–æ–≤—ã–π TTS", test_streaming_tts),
        ("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å", test_text_to_speech),
        ("–°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Ç–æ–∫–∞ Ollama", test_streaming_simulation),
        ("–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç", test_sync_client),
        ("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏", test_latency_measurement),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            logger.info(f"\n{'='*50}")
            logger.info(f"üß™ –¢–µ—Å—Ç: {test_name}")
            logger.info(f"{'='*50}")
            
            result = await test_func()
            if result:
                passed += 1
                logger.info(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            else:
                failed += 1
                logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
            
        except Exception as e:
            failed += 1
            logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    logger.info(f"\n{'='*50}")
    logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info(f"{'='*50}")
    logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
    
    if failed == 0:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.warning(f"‚ö†Ô∏è {failed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(run_all_tests()) 